{"name":"Hydra","tagline":"A JVM based DispatcherComposer Engine","body":"# Hydra\r\nHydra is a JVM based DispatcherComposer Engine.\r\n\r\nBasically, you define the tasks to be performed and the input required for each of those tasks. From then on Hydra takes over - It creates the dependency graph, performs tasks in required order and composes the final output.\r\n\r\nFor each task to be performed, the input can be composed on any of the initial input parameters or output from already completed tasks. Same is the case with final response.\r\n\r\n## Glossary\r\n\r\n#### `Dispatcher`\r\n`Dispatcher` is the top-level orchestrator. A Hydra `Dispatcher` execution comprises of -\r\n\r\n* Already realized, initial map of parameters - `Map<String, Object>`\r\n* An unordered map of `Task`s to be performed - `Map<String, Task>`\r\n* A response curator - `Composer`\r\n\r\n> Hydra provides a default implementation of `Dispatcher` (`DefaultDispatcher`) which can be initialized with or without a `Executor`\r\n\r\n> `DefaultDispatcher` allows for the use of a `Object` context (which is used to instantiate a `DefaultComposer` on the fly) as the response curator.\r\n\r\n#### `Task`\r\nA `Task` is a combination of a `Composer` and a `Callable`\r\n\r\n* The `Composer` is the input curator for the `Callable`.\r\n* Output from `call()` of this `Callable` is the response of this `Task`.\r\n\r\n> Hydra provides a default implementation of `Task` (`DefaultTask`) which is initialized with -\r\n\r\n> * A `Callable` class that is instantiated on the fly. This class needs to have a single argument constructor which is used to instantiate it with a `Composer` output.\r\n> * A `Composer` or a `Object` context (which is used to instantiate a `DefaultComposer` on the fly)\r\n\r\n\r\n#### `Composer`\r\nA `Composer` composes the given structure (`Map`, `List`, `String` or `Number`) based on previously realized values.\r\n\r\n> Hydra provides a default implementation of `Composer` (`DefaultComposer`) which can take a nested collection and can extract out required dependencies and `Expression`s that need to be realized.\r\n\r\n> `Expression`s to be parsed are represented by sandwiching a `String` between `{{` and `}}` and are converted to `DefaultExpression`.\r\n\r\n> ###### Examples -\r\n\r\n> 1. `{{$someVar}}`\r\n> 2. `{{$someMap.someKey}}`\r\n\r\n#### `Expression`\r\nAn `Expression` is a string representation of a data-path.\r\n\r\n> Hydra provides a default implementation of `Expression` (`DefaultExpression`) which represents an expression as `String`.\r\n\r\n> Every variable in the expression starts with a `$`.\r\n\r\n> An `Expression` can be marked as optional by starting it with `#`. An optional expression means that `null` is a valid output. And an exception faced while realizing this expression will also respond back with `null`.\r\n\r\n> ###### Examples:\r\n\r\n> 1. `someConstant` or `1.0` or `1` are static expressions with no variables\r\n> 2. `$someVar` is a variable expression that returns the value of `someVar`\r\n> 3. `$someMap.someKey` is a variable expression that returns value of `someKey` from `someMap`\r\n> 3. `$someMap.someKey[$someList[0]]` is a complex expression depending on more than 1 variable\r\n> 4. `#someMap.someKey` is an optional expression and will return `null` if `someMap` is `null` or if `someMap.someKey` is `null` or non-existent.\r\n\r\n## Quick Usage\r\n\r\nAdd following to `<repositories/>` section of pom.xml -\r\n```xml\r\n<repository>\r\n  <id>clojars</id>\r\n  <name>Clojars repository</name>\r\n  <url>https://clojars.org/repo</url>\r\n</repository>\r\n```\r\n\r\nAdd following to `<dependencies/>` section of your pom.xml -\r\n```xml\r\n<dependency>\r\n  <groupId>com.flipkart.hydra</groupId>\r\n  <artifactId>hydra-dispatcher</artifactId>\r\n  <version>1.1</version>\r\n</dependency>\r\n```\r\n\r\nYou can now, call `Dispatcher` using following code\r\n```java\r\n// Already resolved list of parameters\r\nMap<String, Object> initialParams = ...;\r\n\r\n// Map of tasks to be dispatched (mapped to the keys that will store the task response)\r\nMap<String, Task> tasks = ...;\r\n\r\n// Final response that needs to be realized\r\nMap<String, Object> response = ...;\r\n\r\n// Dispatcher Call\r\nDispatcher dispatcher = new DefaultDispatcher();\r\nObject output = dispatcher.execute(initialParams, tasks, response);\r\n```\r\n\r\n## Example\r\n\r\n### Assumptions\r\n\r\n+ We already have an Employee Name.\r\n+ Assuming all employees have unique names, we want to fetch -\r\n    + Employee ID (provided by EmployeeIdentificationService)\r\n    + Employee Joining Date (provided by EmployeeInfoService)\r\n+ Now using Employee ID, we want to fetch -\r\n    + His department (provided by EmployeeDepartmentService)\r\n    + His salary (provided by EmployeeSalaryService)\r\n        + This information might be confidential and hence can throw UnauthorizedException\r\n        + We don't want to fail in this case\r\n+ Now we want to respond back with all this information\r\n\r\n### Steps\r\n\r\n1. Create the initial set of parameters -\r\n```java\r\nMap<String, Object> initialParams = new HashMap<>();\r\ninitialParams.put(\"employeeName\", \"John Doe\");\r\n```\r\n\r\n2. Create a list of `Task`s to be performed -\r\n##### Task 1 - Fetching `employeeID` from `employeeName`\r\n```java\r\nExpression expression1 = new DefaultExpression(\"{{$employeeName}}\");\r\nComposer composer1 = new DefaultComposer(expression1, true);\r\nTask employeeIDTask = new DefaultTask(EmployeeIdentificationService.class, composer1);\r\n```\r\n##### Task 2 - Fetching `joiningDate` from `employeeName`\r\n```java\r\n// Short notation for creating expression on the fly\r\nComposer composer2 = new DefaultComposer(\"{{$employeeName}}\");\r\nTask joiningDateTask = new DefaultTask(EmployeeInfoService.class, composer2);\r\n```\r\n##### Task 3 - Fetching `department` from `employeeID`\r\n```java\r\n// Short notation for creating composer on the fly\r\nTask departmentTask = new DefaultTask(EmployeeDepartmentService.class, \"{{$employeeID}}\");\r\n```\r\n##### Task 4 - Fetching `salary` from `employeeID`\r\n```java\r\nTask salaryTask = new DefaultTask(EmployeeSalaryService.class, \"{{$employeeID}}\");\r\n```\r\nFinally collecting all `Task`s in a `Map`\r\n```java\r\nMap<String, Task> tasks = new HashMap<>();\r\ntasks.put(\"joiningDate\", joiningDateTask);\r\ntasks.put(\"salary\", salaryTask);\r\ntasks.put(\"department\", departmentTask);\r\ntasks.put(\"employeeID\", employeeIDTask);\r\n```\r\n\r\n3. Create the response curator\r\n```java\r\nMap<String, Object> responseContext = new HashMap<>();\r\nresponseContext.put(\"employeeName\", \"{{$employeeName}}\");\r\nresponseContext.put(\"employeeID\", \"{{$employeeID}}\");\r\nresponseContext.put(\"department\", \"{{$department}}\");\r\nresponseContext.put(\"salary\", \"{{#$salary}}\"); // Optional data - will not fail on null value\r\n```\r\n```java\r\n// This recursively iterates over the responseContext and parses any expression that it finds.\r\nComposer response = new DefaultComposer(responseContext);\r\n```\r\n\r\n4. Dispatch\r\n```java\r\nDispatcher dispatcher = new DefaultDispatcher();\r\nObject output = dispatcher.execute(initialParams, tasks, response);\r\n```\r\n\r\n> Code for this example can be seen [here](https://github.com/flipkart-incubator/hydra/blob/master/hydra-examples/src/main/java/com/flipkart/hydra/example/employee/EmployeeExample.java).\r\n\r\n## Salient Points\r\n+ Easy to use interfaces\r\n+ Auto creation/resolution of dependencies graph\r\n+ Notation to express variables/expressions\r\n\r\n## Changes\r\n\r\nThe change log can be found [here](https://github.com/flipkart-incubator/hydra/blob/master/CHANGES.md)\r\n\r\n## Contribution, Bugs and Feedback\r\n\r\nFor bugs, questions and discussions please use the [Github Issues](https://github.com/flipkart-incubator/hydra/issues).\r\nPlease follow the [contribution guidelines](https://github.com/flipkart-incubator/hydra/blob/master/CONTRIBUTING.md) when submitting pull requests.\r\n\r\n## License\r\n\r\nCopyright 2015 Flipkart Internet, pvt ltd.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}